"""create initial tables

Revision ID: 55af1d54e09f
Revises: 
Create Date: 2025-10-14 15:05:46.553830

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = '55af1d54e09f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('clerk_user_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_clerk_user_id'), 'users', ['clerk_user_id'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('file_url', sa.String(), nullable=False),
    sa.Column('doc_type', sa.Enum('RFP', 'PRODUCT_DOC', 'WEBSITE', name='doctype'), nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(), nullable=True),
    sa.Column('processing_status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='processingstatus'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_documents_user_id'), 'documents', ['user_id'], unique=False)
    op.create_table('resync_quota',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('month_year', sa.String(), nullable=False),
    sa.Column('resync_count', sa.Integer(), nullable=True),
    sa.Column('last_resync_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resync_quota_user_id'), 'resync_quota', ['user_id'], unique=False)
    op.create_table('rfp_projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('rfp_name', sa.String(), nullable=False),
    sa.Column('rfp_file_url', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='rfpstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rfp_projects_user_id'), 'rfp_projects', ['user_id'], unique=False)
    op.create_table('attributes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('source_doc_id', sa.UUID(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['source_doc_id'], ['documents.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attributes_category'), 'attributes', ['category'], unique=False)
    op.create_index(op.f('ix_attributes_key'), 'attributes', ['key'], unique=False)
    op.create_index(op.f('ix_attributes_user_id'), 'attributes', ['user_id'], unique=False)
    op.create_table('rfp_questions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('question_text', sa.String(), nullable=False),
    sa.Column('answer_text', sa.String(), nullable=True),
    sa.Column('trust_score', sa.Float(), nullable=True),
    sa.Column('source_type', sa.String(), nullable=True),
    sa.Column('source_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('user_edited', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['rfp_projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rfp_questions_project_id'), 'rfp_questions', ['project_id'], unique=False)
    op.create_table('vector_chunks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('doc_id', sa.UUID(), nullable=False),
    sa.Column('chunk_text', sa.Text(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('chunk_metadata', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['doc_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vector_chunks_doc_id'), 'vector_chunks', ['doc_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_vector_chunks_doc_id'), table_name='vector_chunks')
    op.drop_table('vector_chunks')
    op.drop_index(op.f('ix_rfp_questions_project_id'), table_name='rfp_questions')
    op.drop_table('rfp_questions')
    op.drop_index(op.f('ix_attributes_user_id'), table_name='attributes')
    op.drop_index(op.f('ix_attributes_key'), table_name='attributes')
    op.drop_index(op.f('ix_attributes_category'), table_name='attributes')
    op.drop_table('attributes')
    op.drop_index(op.f('ix_rfp_projects_user_id'), table_name='rfp_projects')
    op.drop_table('rfp_projects')
    op.drop_index(op.f('ix_resync_quota_user_id'), table_name='resync_quota')
    op.drop_table('resync_quota')
    op.drop_index(op.f('ix_documents_user_id'), table_name='documents')
    op.drop_table('documents')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_clerk_user_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
